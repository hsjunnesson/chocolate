// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/engine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fengine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fengine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fengine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fengine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fengine_2eproto;
namespace engine {
class EngineParams;
struct EngineParamsDefaultTypeInternal;
extern EngineParamsDefaultTypeInternal _EngineParams_default_instance_;
class TilesheetParams;
struct TilesheetParamsDefaultTypeInternal;
extern TilesheetParamsDefaultTypeInternal _TilesheetParams_default_instance_;
}  // namespace engine
PROTOBUF_NAMESPACE_OPEN
template<> ::engine::EngineParams* Arena::CreateMaybeMessage<::engine::EngineParams>(Arena*);
template<> ::engine::TilesheetParams* Arena::CreateMaybeMessage<::engine::TilesheetParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace engine {

// ===================================================================

class TilesheetParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.TilesheetParams) */ {
 public:
  inline TilesheetParams() : TilesheetParams(nullptr) {}
  ~TilesheetParams() override;
  explicit constexpr TilesheetParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TilesheetParams(const TilesheetParams& from);
  TilesheetParams(TilesheetParams&& from) noexcept
    : TilesheetParams() {
    *this = ::std::move(from);
  }

  inline TilesheetParams& operator=(const TilesheetParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TilesheetParams& operator=(TilesheetParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TilesheetParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TilesheetParams* internal_default_instance() {
    return reinterpret_cast<const TilesheetParams*>(
               &_TilesheetParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TilesheetParams& a, TilesheetParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TilesheetParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TilesheetParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TilesheetParams* New() const final {
    return new TilesheetParams();
  }

  TilesheetParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TilesheetParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TilesheetParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TilesheetParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TilesheetParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.TilesheetParams";
  }
  protected:
  explicit TilesheetParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtlasFilenameFieldNumber = 1,
    kTileSizeFieldNumber = 2,
    kTilesWidthFieldNumber = 3,
    kTilesHeightFieldNumber = 4,
    kAtlasGutterFieldNumber = 5,
  };
  // string atlas_filename = 1;
  void clear_atlas_filename();
  const std::string& atlas_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_atlas_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_atlas_filename();
  PROTOBUF_MUST_USE_RESULT std::string* release_atlas_filename();
  void set_allocated_atlas_filename(std::string* atlas_filename);
  private:
  const std::string& _internal_atlas_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atlas_filename(const std::string& value);
  std::string* _internal_mutable_atlas_filename();
  public:

  // int32 tile_size = 2;
  void clear_tile_size();
  ::PROTOBUF_NAMESPACE_ID::int32 tile_size() const;
  void set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tile_size() const;
  void _internal_set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tiles_width = 3;
  void clear_tiles_width();
  ::PROTOBUF_NAMESPACE_ID::int32 tiles_width() const;
  void set_tiles_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiles_width() const;
  void _internal_set_tiles_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tiles_height = 4;
  void clear_tiles_height();
  ::PROTOBUF_NAMESPACE_ID::int32 tiles_height() const;
  void set_tiles_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tiles_height() const;
  void _internal_set_tiles_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 atlas_gutter = 5;
  void clear_atlas_gutter();
  ::PROTOBUF_NAMESPACE_ID::int32 atlas_gutter() const;
  void set_atlas_gutter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_atlas_gutter() const;
  void _internal_set_atlas_gutter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:engine.TilesheetParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atlas_filename_;
  ::PROTOBUF_NAMESPACE_ID::int32 tile_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 tiles_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 tiles_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 atlas_gutter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fengine_2eproto;
};
// -------------------------------------------------------------------

class EngineParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:engine.EngineParams) */ {
 public:
  inline EngineParams() : EngineParams(nullptr) {}
  ~EngineParams() override;
  explicit constexpr EngineParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EngineParams(const EngineParams& from);
  EngineParams(EngineParams&& from) noexcept
    : EngineParams() {
    *this = ::std::move(from);
  }

  inline EngineParams& operator=(const EngineParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EngineParams& operator=(EngineParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EngineParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EngineParams* internal_default_instance() {
    return reinterpret_cast<const EngineParams*>(
               &_EngineParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EngineParams& a, EngineParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EngineParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EngineParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EngineParams* New() const final {
    return new EngineParams();
  }

  EngineParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EngineParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EngineParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EngineParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "engine.EngineParams";
  }
  protected:
  explicit EngineParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 4,
    kWindowWidthFieldNumber = 1,
    kWindowHeightFieldNumber = 2,
    kRenderScaleFieldNumber = 3,
  };
  // string title = 4;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_MUST_USE_RESULT std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 window_width = 1;
  void clear_window_width();
  ::PROTOBUF_NAMESPACE_ID::int32 window_width() const;
  void set_window_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_window_width() const;
  void _internal_set_window_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 window_height = 2;
  void clear_window_height();
  ::PROTOBUF_NAMESPACE_ID::int32 window_height() const;
  void set_window_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_window_height() const;
  void _internal_set_window_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 render_scale = 3;
  void clear_render_scale();
  ::PROTOBUF_NAMESPACE_ID::int32 render_scale() const;
  void set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_render_scale() const;
  void _internal_set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:engine.EngineParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int32 window_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 window_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 render_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fengine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TilesheetParams

// string atlas_filename = 1;
inline void TilesheetParams::clear_atlas_filename() {
  atlas_filename_.ClearToEmpty();
}
inline const std::string& TilesheetParams::atlas_filename() const {
  // @@protoc_insertion_point(field_get:engine.TilesheetParams.atlas_filename)
  return _internal_atlas_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TilesheetParams::set_atlas_filename(ArgT0&& arg0, ArgT... args) {
 
 atlas_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:engine.TilesheetParams.atlas_filename)
}
inline std::string* TilesheetParams::mutable_atlas_filename() {
  std::string* _s = _internal_mutable_atlas_filename();
  // @@protoc_insertion_point(field_mutable:engine.TilesheetParams.atlas_filename)
  return _s;
}
inline const std::string& TilesheetParams::_internal_atlas_filename() const {
  return atlas_filename_.Get();
}
inline void TilesheetParams::_internal_set_atlas_filename(const std::string& value) {
  
  atlas_filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TilesheetParams::_internal_mutable_atlas_filename() {
  
  return atlas_filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TilesheetParams::release_atlas_filename() {
  // @@protoc_insertion_point(field_release:engine.TilesheetParams.atlas_filename)
  return atlas_filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TilesheetParams::set_allocated_atlas_filename(std::string* atlas_filename) {
  if (atlas_filename != nullptr) {
    
  } else {
    
  }
  atlas_filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), atlas_filename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:engine.TilesheetParams.atlas_filename)
}

// int32 tile_size = 2;
inline void TilesheetParams::clear_tile_size() {
  tile_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::_internal_tile_size() const {
  return tile_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::tile_size() const {
  // @@protoc_insertion_point(field_get:engine.TilesheetParams.tile_size)
  return _internal_tile_size();
}
inline void TilesheetParams::_internal_set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tile_size_ = value;
}
inline void TilesheetParams::set_tile_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tile_size(value);
  // @@protoc_insertion_point(field_set:engine.TilesheetParams.tile_size)
}

// int32 tiles_width = 3;
inline void TilesheetParams::clear_tiles_width() {
  tiles_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::_internal_tiles_width() const {
  return tiles_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::tiles_width() const {
  // @@protoc_insertion_point(field_get:engine.TilesheetParams.tiles_width)
  return _internal_tiles_width();
}
inline void TilesheetParams::_internal_set_tiles_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tiles_width_ = value;
}
inline void TilesheetParams::set_tiles_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tiles_width(value);
  // @@protoc_insertion_point(field_set:engine.TilesheetParams.tiles_width)
}

// int32 tiles_height = 4;
inline void TilesheetParams::clear_tiles_height() {
  tiles_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::_internal_tiles_height() const {
  return tiles_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::tiles_height() const {
  // @@protoc_insertion_point(field_get:engine.TilesheetParams.tiles_height)
  return _internal_tiles_height();
}
inline void TilesheetParams::_internal_set_tiles_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tiles_height_ = value;
}
inline void TilesheetParams::set_tiles_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tiles_height(value);
  // @@protoc_insertion_point(field_set:engine.TilesheetParams.tiles_height)
}

// int32 atlas_gutter = 5;
inline void TilesheetParams::clear_atlas_gutter() {
  atlas_gutter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::_internal_atlas_gutter() const {
  return atlas_gutter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TilesheetParams::atlas_gutter() const {
  // @@protoc_insertion_point(field_get:engine.TilesheetParams.atlas_gutter)
  return _internal_atlas_gutter();
}
inline void TilesheetParams::_internal_set_atlas_gutter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  atlas_gutter_ = value;
}
inline void TilesheetParams::set_atlas_gutter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_atlas_gutter(value);
  // @@protoc_insertion_point(field_set:engine.TilesheetParams.atlas_gutter)
}

// -------------------------------------------------------------------

// EngineParams

// int32 window_width = 1;
inline void EngineParams::clear_window_width() {
  window_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::_internal_window_width() const {
  return window_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::window_width() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.window_width)
  return _internal_window_width();
}
inline void EngineParams::_internal_set_window_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  window_width_ = value;
}
inline void EngineParams::set_window_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_window_width(value);
  // @@protoc_insertion_point(field_set:engine.EngineParams.window_width)
}

// int32 window_height = 2;
inline void EngineParams::clear_window_height() {
  window_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::_internal_window_height() const {
  return window_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::window_height() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.window_height)
  return _internal_window_height();
}
inline void EngineParams::_internal_set_window_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  window_height_ = value;
}
inline void EngineParams::set_window_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_window_height(value);
  // @@protoc_insertion_point(field_set:engine.EngineParams.window_height)
}

// int32 render_scale = 3;
inline void EngineParams::clear_render_scale() {
  render_scale_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::_internal_render_scale() const {
  return render_scale_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EngineParams::render_scale() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.render_scale)
  return _internal_render_scale();
}
inline void EngineParams::_internal_set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  render_scale_ = value;
}
inline void EngineParams::set_render_scale(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_render_scale(value);
  // @@protoc_insertion_point(field_set:engine.EngineParams.render_scale)
}

// string title = 4;
inline void EngineParams::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& EngineParams::title() const {
  // @@protoc_insertion_point(field_get:engine.EngineParams.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EngineParams::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:engine.EngineParams.title)
}
inline std::string* EngineParams::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:engine.EngineParams.title)
  return _s;
}
inline const std::string& EngineParams::_internal_title() const {
  return title_.Get();
}
inline void EngineParams::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EngineParams::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EngineParams::release_title() {
  // @@protoc_insertion_point(field_release:engine.EngineParams.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EngineParams::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:engine.EngineParams.title)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace engine

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fengine_2eproto
